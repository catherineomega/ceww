<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Category;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Exception;

/**
 * PublicationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PublicationRepository extends EntityRepository {

    public function browseQuery(Category $category = null) {
        $qb = $this->createQueryBuilder('e');
        if($category) {
            $qb->andWhere('e.category = :category');
            $qb->setParameter('category', $category);
        }
        $qb->orderBy('e.sortableTitle', 'ASC');
        return $qb->getQuery();
    }
    
    public function searchQuery($q) {
        $qb = $this->createQueryBuilder('e');
        $qb->addSelect("MATCH_AGAINST (e.title, :q 'IN BOOLEAN MODE') as HIDDEN score");
        $qb->add('where', "MATCH_AGAINST (e.title, :q 'IN BOOLEAN MODE') > 0.5");
        $qb->orderBy('score', 'desc');
        $qb->setParameter('q', $q);
        return $qb->getQuery();
    }

    public function findPublication(Category $category, $title, $date = null, $placeName = null) {
        $qb = $this->createQueryBuilder('p');
        $qb->andWhere('p.title = :title');
        $qb->setParameter('title', $title);
        $qb->andWhere('p.category = :category');
        $qb->setParameter('category', $category);

        if ($date) {
            $qb->innerJoin('p.dateYear', 'd');
            $qb->andWhere('d.value = :value');
            $qb->setParameter('value', $date);
        } else {
            $qb->andWhere('p.dateYear is null');
        }

        if ($placeName) {
            $qb->innerJoin('p.location', 'l');
            $qb->andWhere('l.name = :place');
            $qb->setParameter('place', $placeName);
        } else {
            $qb->andWhere('p.location is null');
        }

        try {
            return $qb->getQuery()->getOneOrNullResult();
        } catch (NonUniqueResultException $e) {
            throw new Exception("Duplicate publication detected - " . implode(':', [$category, $title, $date, $placeName]));
        }
    }

}
